from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.keys import Keys
import requests
from bs4 import BeautifulSoup
from time import sleep


def get_driver():
    options = Options()
    options.add_argument("user-data-dir=C:\\Users\\anvin\\AppData\\Local\\Google\\Chrome\\User Data")
    path = 'C:\\Program Files (x86)\\Google\\chromedriver.exe'
    options.add_experimental_option("detach", True)
    driver = webdriver.Chrome(path, options=options)
    text_search = 'Product Development Engineer'
    location_search = 'california'
    #base_site = 'https://www.linkedin.com/jobs'
    base_site = 'https://www.linkedin.com/jobs/search/?geoId=102095887&keywords=Product%20Development%20Engineer&location=California%2C%20United%20States'
    headerss = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/"
            "70.0.3538.102 Safari/537.36 Edge/18.19582"}
    driver.get(base_site)
    try:
        search_bars = driver.find_elements_by_class_name('jobs-search-box__text-input')
        search_keywords = search_bars[0]
        search_keywords.send_keys(text_search)
        sleep(1)
        search_location = search_bars[3]
        search_location.clear()
        search_location.send_keys(location_search)
        sleep(1)
        search_location.send_keys(Keys.RETURN)
        WebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="search-reusables__filters-'
                                                                              'bar"]/div/div'))).click()   # All Filters
        sleep(3)
        past_week = '/html/body/div[3]/div/div/div[2]/ul/li[2]/fieldset/div/ul/li[3]/label/p/span'
        past_week = driver.find_element(by='xpath', value=past_week)
        past_week.click()
        experience_entry_level = '/html/body/div[3]/div/div/div[2]/ul/li[3]/fieldset/div/ul/li[2]/label/p/span'
        experience_associate_level = '/html/body/div[3]/div/div/div[2]/ul/li[3]/fieldset/div/ul/li[3]/label/p/span'
        experience_mid_senior_level = '/html/body/div[3]/div/div/div[2]/ul/li[3]/fieldset/div/ul/li[4]/label/p/span'
        entry_job_type = driver.find_element(by='xpath', value=experience_entry_level)
        associate_job_type = driver.find_element(by='xpath', value=experience_associate_level)
        mid_senior_job_type = driver.find_element(by='xpath', value=experience_mid_senior_level)
        entry_job_type.click()
        associate_job_type.click()
        mid_senior_job_type.click()
        job_type = '/html/body/div[3]/div/div/div[2]/ul/li[5]/fieldset/div/ul/li[1]/label/p/span'
        job_type = driver.find_element(by='xpath', value=job_type)
        job_type.click()
        salary = '/html/body/div[3]/div/div/div[2]/ul/li[15]/fieldset/div/ul/li[3]/label/p/span'
        salary = driver.find_element(by='xpath', value=salary)
        salary.click()
        # y = driver.find_elements_by_class_name('search-filters-bar')   # to select the complete top bar
        driver.find_element_by_xpath('/html/body/div[3]/div/div/div[3]/div/button[2]').click()    # to click on show results option if filter
    except Exception as e:
        print(e)


if __name__ == "__main__":
    get_driver()
